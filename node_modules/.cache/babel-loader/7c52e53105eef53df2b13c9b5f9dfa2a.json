{"ast":null,"code":"var _jsxFileName = \"/home/anthony/Documents/projects/ancient-gps/src/components/grid/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { BLOCK_GRID, BOXES_X, BOXES_Y, BOX_SIZE, START_NODE } from \"./constants\";\nimport { drawGrid } from \"./helpers\";\nimport { bfs } from \"./algorithms/bfs\";\nimport { recursiveDivision } from \"./algorithms/recursiveDivision\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Grid = () => {\n  _s();\n\n  const canvasRef = useRef(null);\n  const dispatch = useDispatch();\n  const gridData = useSelector(store => store.App.gridData);\n  useEffect(() => {\n    if (canvasRef.current === null) return;\n    const canvas = canvasRef.current;\n    canvas.width = BOXES_X * BOX_SIZE;\n    canvas.height = BOXES_Y * BOX_SIZE;\n    const ctx = canvas.getContext(\"2d\");\n    drawGrid(ctx, 9999, 9999); // recursiveBacktracking(START_NODE, gridData, ctx, new Set<string>());\n    // recursiveDivision(START_NODE, gridData, ctx, new Set<string>());\n\n    recursiveDivision({\n      grid: gridData,\n      rowStart: 2,\n      rowEnd: BOXES_Y - 3,\n      colStart: 2,\n      colEnd: BOXES_X - 3,\n      split: \"horizontal\",\n      surroundingWalls: false,\n      ctx\n    }).then(() => {\n      // dfs(START_NODE, gridData, ctx, new Set<string>());\n      bfs(START_NODE, gridData, ctx);\n    }); // canvas.addEventListener(\"mousemove\", (e) => {\n    //   listenForCanvasHover(e, ctx, gridData);\n    // });\n\n    window.addEventListener(\"resize\", e => {\n      drawGrid(ctx, 9999, 9999);\n    });\n    return () => {\n      // canvas.removeEventListener(\"mousemove\", (e) => {\n      //   listenForCanvasHover(e, ctx, gridData);\n      // });\n      window.removeEventListener(\"resize\", e => {\n        drawGrid(ctx, 9999, 9999);\n      });\n    };\n  }, [canvasRef, dispatch, gridData]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    className: `${BLOCK_GRID}`,\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Grid, \"fktxr/Ba9diSlzS958EpXwvFajE=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Grid;\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/home/anthony/Documents/projects/ancient-gps/src/components/grid/index.tsx"],"names":["React","useEffect","useRef","useDispatch","useSelector","BLOCK_GRID","BOXES_X","BOXES_Y","BOX_SIZE","START_NODE","drawGrid","bfs","recursiveDivision","Grid","canvasRef","dispatch","gridData","store","App","current","canvas","width","height","ctx","getContext","grid","rowStart","rowEnd","colStart","colEnd","split","surroundingWalls","then","window","addEventListener","e","removeEventListener"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAGA,SACEC,UADF,EAEEC,OAFF,EAGEC,OAHF,EAIEC,QAJF,EAKEC,UALF,QAMO,aANP;AAOA,SAASC,QAAT,QAAyB,WAAzB;AAEA,SAASC,GAAT,QAAoB,kBAApB;AAEA,SAASC,iBAAT,QAAkC,gCAAlC;;;AAEA,MAAMC,IAAc,GAAG,MAAM;AAAA;;AAC3B,QAAMC,SAAS,GAAGZ,MAAM,CAAC,IAAD,CAAxB;AACA,QAAMa,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAMa,QAAe,GAAGZ,WAAW,CAAEa,KAAD,IAAmBA,KAAK,CAACC,GAAN,CAAUF,QAA9B,CAAnC;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,SAAS,CAACK,OAAV,KAAsB,IAA1B,EAAgC;AAChC,UAAMC,MAAyB,GAAGN,SAAS,CAACK,OAA5C;AACAC,IAAAA,MAAM,CAACC,KAAP,GAAef,OAAO,GAAGE,QAAzB;AACAY,IAAAA,MAAM,CAACE,MAAP,GAAgBf,OAAO,GAAGC,QAA1B;AAEA,UAAMe,GAA6B,GAAGH,MAAM,CAACI,UAAP,CACpC,IADoC,CAAtC;AAIAd,IAAAA,QAAQ,CAACa,GAAD,EAAM,IAAN,EAAY,IAAZ,CAAR,CAVc,CAWd;AACA;;AACAX,IAAAA,iBAAiB,CAAC;AAChBa,MAAAA,IAAI,EAAET,QADU;AAEhBU,MAAAA,QAAQ,EAAE,CAFM;AAGhBC,MAAAA,MAAM,EAAEpB,OAAO,GAAG,CAHF;AAIhBqB,MAAAA,QAAQ,EAAE,CAJM;AAKhBC,MAAAA,MAAM,EAAEvB,OAAO,GAAG,CALF;AAMhBwB,MAAAA,KAAK,EAAE,YANS;AAOhBC,MAAAA,gBAAgB,EAAE,KAPF;AAQhBR,MAAAA;AARgB,KAAD,CAAjB,CASGS,IATH,CASQ,MAAM;AACZ;AACArB,MAAAA,GAAG,CAACF,UAAD,EAAaO,QAAb,EAAuBO,GAAvB,CAAH;AACD,KAZD,EAbc,CA2Bd;AACA;AACA;;AAEAU,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAmCC,CAAD,IAAO;AACvCzB,MAAAA,QAAQ,CAACa,GAAD,EAAM,IAAN,EAAY,IAAZ,CAAR;AACD,KAFD;AAIA,WAAO,MAAM;AACX;AACA;AACA;AACAU,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAsCD,CAAD,IAAO;AAC1CzB,QAAAA,QAAQ,CAACa,GAAD,EAAM,IAAN,EAAY,IAAZ,CAAR;AACD,OAFD;AAGD,KAPD;AAQD,GA3CQ,EA2CN,CAACT,SAAD,EAAYC,QAAZ,EAAsBC,QAAtB,CA3CM,CAAT;AA6CA,sBAAO;AAAQ,IAAA,SAAS,EAAG,GAAEX,UAAW,EAAjC;AAAoC,IAAA,GAAG,EAAES;AAAzC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAnDD;;GAAMD,I;UAEaV,W,EACOC,W;;;KAHpBS,I;AAqDN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { IStore } from \"../../types\";\n\nimport {\n  BLOCK_GRID,\n  BOXES_X,\n  BOXES_Y,\n  BOX_SIZE,\n  START_NODE,\n} from \"./constants\";\nimport { drawGrid } from \"./helpers\";\nimport { IGrid } from \"./types\";\nimport { bfs } from \"./algorithms/bfs\";\nimport { dfs } from \"./algorithms/dfs\";\nimport { recursiveDivision } from \"./algorithms/recursiveDivision\";\n\nconst Grid: React.FC = () => {\n  const canvasRef = useRef(null);\n  const dispatch = useDispatch();\n  const gridData: IGrid = useSelector((store: IStore) => store.App.gridData);\n\n  useEffect(() => {\n    if (canvasRef.current === null) return;\n    const canvas: HTMLCanvasElement = canvasRef.current;\n    canvas.width = BOXES_X * BOX_SIZE;\n    canvas.height = BOXES_Y * BOX_SIZE;\n\n    const ctx: CanvasRenderingContext2D = canvas.getContext(\n      \"2d\"\n    ) as CanvasRenderingContext2D;\n\n    drawGrid(ctx, 9999, 9999);\n    // recursiveBacktracking(START_NODE, gridData, ctx, new Set<string>());\n    // recursiveDivision(START_NODE, gridData, ctx, new Set<string>());\n    recursiveDivision({\n      grid: gridData,\n      rowStart: 2,\n      rowEnd: BOXES_Y - 3,\n      colStart: 2,\n      colEnd: BOXES_X - 3,\n      split: \"horizontal\",\n      surroundingWalls: false,\n      ctx,\n    }).then(() => {\n      // dfs(START_NODE, gridData, ctx, new Set<string>());\n      bfs(START_NODE, gridData, ctx);\n    });\n\n    // canvas.addEventListener(\"mousemove\", (e) => {\n    //   listenForCanvasHover(e, ctx, gridData);\n    // });\n\n    window.addEventListener(\"resize\", (e) => {\n      drawGrid(ctx, 9999, 9999);\n    });\n\n    return () => {\n      // canvas.removeEventListener(\"mousemove\", (e) => {\n      //   listenForCanvasHover(e, ctx, gridData);\n      // });\n      window.removeEventListener(\"resize\", (e) => {\n        drawGrid(ctx, 9999, 9999);\n      });\n    };\n  }, [canvasRef, dispatch, gridData]);\n\n  return <canvas className={`${BLOCK_GRID}`} ref={canvasRef} />;\n};\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}